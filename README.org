#+TITLE: Slit Scan -- Generate an effect similar to 2001's star gate sequences
#+AUTHOR: Fred Mitchell
#+SETUPFILE: /development/config/LaTeX-Org-setup.org

* Fundamentals and Design 
 \includegraphics[scale=0.4]{images/2001-example.png}
** Introduction
   Slit-Scan is the command-line tool that allow you to create slit-scans similar to
   the star-gate sequences in 2001: A Space Odyssey. The idea here is to add a lot of flexibility
   to allow you to acheive results even beyond what was acheived in what is arguably the greatest
   Science Fiction film of all time.
** Mathematics
   Here, we fully specify the mathematics involved with the slit-scan function.

*** Generating the slit
    Firstly, we define the slit function as a function between 2 points.
     
    #+BEGIN_EXPORT latex
    \item $t$ is time, in seconds, and
    \item $p_1, p_2$ are points defining tbe beginning and ending of the slit, and
    \item $$
     slit(p_1, p_2, \rho) = g(p_1, p_2, curve(\rho)) \Bigr| _{\rho=0} ^{\rho=1}
    $$
    \item where $$
     \begin{array}{l}
     p_1 = (x_1, y_1)\\
     p_2 = (x_2, y_2)
     \end{array}
    $$
    \item and $0 \ge x, y, \rho \ge 1$
    #+END_EXPORT

    where $curve(\rho)$ defines the shape of the slit. For the traditional case,
    $curve(\rho)$ will be $0$, defining a straight line from $p_1$ to $p_2$. In other cases,
    $curve(\rho)$ will result in pertubations in the $(p_1, p_2)$ line, perpendular to the
    line itself.
    
    $\rho$ is the parametic for the slit. $x$ and $y$ represnts the idealized coordinates of the
    image being scanned by the slit, which will be converted to the actual physical coordinates of
    the pixels in the image, along with pixel averaging in the 3x3 or 5x5 square with the physical
    coordinate being at the center.

    Secondly, we define the movement of the slit across an image in terms of time $t$ (in seconds):

    #+BEGIN_EXPORT latex
    $$
    \begin{array}{l}
        p_1{_t} = p_1(t)\\
        p_2{_t} = p_2(t)
    \end{array}
    $$
    #+END_EXPORT
     
    Where said movement of $p_1$ and $p_2$ may be independent with each other, solely with $t$ as their
    common parametric basis, but in most cases the "trivial" or traditional approach will be taken as the 
    movenent being equivalent, basically to "scan" the image from one side to the other.

    Thirdly, we define the compositor function. The compositor is responsible for compositing the time-varying
    contents of the slit unto the final canvas. Here, the canvas is bisected either horizontally or vertically
    by a straight-line slit, and with each time instant, the slit contents is forwarded away from the slit.

    + The Hip library provides a way to navagate the image via
      map functions. The imap provides (x,y) coordinates
      of the pixels given. We can and will problably have
      to do do some sort of lookup "table" on the coordinates
      to perform the expected operation, but I need to 
      give this more thought.

*** The Compositor
    The compositor may "stretch" the contents of the slit as a function of the distance from the slit until it
    reaches the end of the canvass.
    
     #+BEGIN_EXPORT latex
     \tikzset{annotations/.style = {
       tsx/show help lines,
       every path/.append style = {very thick, color = red},
       every node/.append style = {blue, font = \bfseries\sffamily}}}

     \begin{tikzonimage}[width=.8\textwidth]{images/compositor.png}
       [annotations]
       \draw (0.3,0.5) edge[->] (0.1,0.9) (0.73,0.4) edge[->] (0.9,0.9);
       \node[rotate=90] at (0.27,0.3) {canvas};
       \node[rotate=30] at (0.86,0.65) {slit expansion};
     \end{tikzonimage}
     #+END_EXPORT

     #+BEGIN_EXPORT latex
     \begin{tikzpicture}
       \begin{axis} [grid, axis lines=center]
       \addplot [domain=-3:3, thick, smooth] { x^3 - 6*x };
       \end{axis}
     \end{tikzpicture}

     $$
      \frac{f(x)-f(a) x-a}g
     $$
     #+END_EXPORT

*** Actual implementation of the mathematics
    We shall do our scans from the canvas, and map that to the two source images,
    because it simplifies things with regards to smoothing between pixels, etc.

**** Matrix transforms and the math coding conventions

     + In the code, $A_x$, $A_y$, ..., $D_x$, $D_y$ shall be represented by $ax$, $ay$...,
       and likewise, $M_{11}$, $M_{12}$, ..., shall be represented by $m11$, $m12$...

     + We shall designate the former as "square arrows", and the latter, of course,
       are the parameters in the transformation matrix.

     + Note that our origin is in the upper-left corner, and positive moves to the right
       and down, for the x any y axis, respectively. This reflects the normal way
       computer graphics are always implemented. 

     The following was taken from:
     https://blog.plantingcode.net/2d-only-perspective-transform/

     #+BEGIN_EXPORT latex
    To make things easier, the solution maps a unit square to the
    square defined by the pair of vectors. In other words:

    $$
    \begin{align}
    (0, 0, 1) &\mapsto A \\
    (0, 1, 1) &\mapsto B \\
    (1, 0, 1) &\mapsto C \\
    (1, 1, 1) &\mapsto D
    \end{align}

    Using the above notation, it is possible to
    start calculating the matrix which will take any 2D point in
    unit coordinates and convert it to projected coordinates.

    \begin{align}
    \left[ { \begin{array}{ccc}
    M_{11} & M_{12} & M_{13} \\
    M_{21} & M_{22} & M_{23} \\
    M_{31} & M_{32} & 1
    \end{array} } \right]
    \end{align}

    With the mapping to point \(A\) being straightforward, two 
    entries can already be solved for (subscripts \(x\) and \(y\) are for the 2D components):

    \begin{align}    
    M_{13} &= A_x \\
    M_{23} &= A_y
    \end{align}

    Using the unit mappings with the matrix and factoring in the perspective divide 
    required for points gets the following system of equations for 
    matrix elements to known points.

    \begin{align}
    {M_{12} + A_x}\over{M_{32} + 1} &= B_x \\ \\
    {M_{22} + A_y}\over{M_{32} + 1} &= B_y \\ \\
    {M_{11} + A_x}\over{M_{31} + 1} &= C_x \\ \\
    {M_{22} + A_x}\over{M_{31} + 1} &= C_y \\ \\
    {M_{11} + M_{12} + A_x}\over{M_{31} + M_{32} + 1} &= D_x \\ \\
    {M_{21} + M_{22} + A_x}\over{M_{31} + M_{32} + 1} &= D_y
    \end{align}

    Multiplying both sides by the left-hand denominator and arranging all matrix
    terms to the left and all constant terms to the right changes the equations to:

    \begin{align}
    M_{12} - B_{x}M_{32} &= B_x - A_x \\
    M_{22} - B_{y}M_{32} &= B_y - A_y \\
    M_{11} - C_{x}M_{31} &= C_x - A_x \\
    M_{21} - C_{y}M_{31} &= C_y - A_y \\
    M_{11} + M_{12} - D_{x}M_{31} - D_{x}M_{32} &= D_x - A_x \\
    M_{21} + M_{22} - D_{y}M_{31} - D_{y}M_{32} &= D_y - A_y
    \end{align}

    Setting up the equations to perform Gaussian Elimination on them yields:
    \[
    \begin{array}{cccccccc}
    M_{11} & M_{12} & M_{21} & M_{22} & M_{31} & M_{32} \\
    1 & 0 & 0 & 0 & -C_x & 0 & = & C_x - A_x \\
    0 & 1 & 0 & 0 & 0 & -B_x & = & B_x - A_x \\
    0 & 0 & 1 & 0 & -C_y & 0 & = & C_y - A_y \\
    0 & 0 & 0 & 1 & 0 & -B_y & = & B_y - A_y \\
    1 & 1 & 0 & 0 & -D_x & -D_x & = & D_x - A_x \\
    0 & 0 & 1 & 1 & -D_y & -D_y & = & D_y - A_y
    \end{array}
    \]
    
    The top four rows are already in a nice enough form that their equations
    can be extracted directly:

    \begin{align}
    M_{11} &= (1 + M_{31})C_x - A_x \\
    M_{12} &= (1 + M_{32})B_x - A_x \\
    M_{21} &= (1 + M_{31})C_y - A_y \\
    M_{22} &= (1 + M_{32})B_y - A_y
    \end{align}
    
    Subtracting out the first two rows from the fifth row and the middle two rows from the last 
    row results in:

    \[
    \begin{array}{cccccccc}
    0 & 0 & 0 & 0 & C_x - D_x & B_x - D_x & = & D_x + A_x - B_x - C_x \\
    0 & 0 & 0 & 0 & C_y - D_y & B_y - D_y & = & D_y + A_y - B_y - C_y
    \end{array}
    \]

    These two equations serve as the starting point for determining
    the \(M_{31}\) and \(M_{32}\) terms. Focusing on simplifying the \(M_{31}\) term first
    through division yields:

    \[
    \begin{array}{cccccccc}
    0 & 0 & 0 & 0 & 1 & {B_x - D_x}\over{C_x - D_x} & = & {D_x + A_x - B_x - C_x}\over{C_x - D_x} \\
    0 & 0 & 0 & 0 & 1 & {B_y - D_y}\over{C_y - D_y} & = & {D_y + A_y - B_y - C_y}\over{C_y - D_y}
    \end{array}
    \]

    Subtraction of the top equation from the bottom and subsequent division results
    in the very large (but ultimately very simple) equation for \(M_{32}\):

    \begin{align}
    \left( { \frac{B_y - D_y}{C_y - D_y} - \frac{B_x - D_x}{C_x - D_x} } \right) M_{32} &= \frac{D_y + A_y - B_y - C_y}{C_y - D_y} - \frac{D_x + A_x - B_x - C_x}{C_x - D_x} \\
    M_{32} &= \frac{\frac{D_y + A_y - B_y - C_y}{C_y - D_y} - \frac{D_x + A_x - B_x - C_x}{C_x - D_x}}{\frac{B_y - D_y}{C_y - D_y} - \frac{B_x - D_x}{C_x - D_x}}    
    \end{align}

    Dividing out the \(M_{32}\) term instead before subtracting the bottom
    equation from the top and dividing solves for \(M_{31}\).

    \[
    \begin{array}{cccccccc}
    0 & 0 & 0 & 0 & {C_x - D_x}\over{B_x - D_x} & 1 & = & {D_x + A_x - B_x - C_x}\over{B_x - D_x} \\0 & 0 & 0 & 0 & {C_y - D_y}\over{B_y - D_y} & 1 & = & {D_y + A_y - B_y - C_y}\over{B_y - D_y}
    \end{array}
    \]$$ M_{31} = \frac{\frac{D_x + A_x - B_x - C_x}{B_x - D_x} - \frac{D_y + A_y - B_y - C_y}{B_y - D_y}}{\frac{C_x - D_x}{B_x - D_x} - \frac{C_y - D_y}{B_y - D_y}} 
     $$

     Continuing forward with \(M_{31}\) and using algebraic techniques to consolidate and simplify terms brings about:

    \begin{align}
    M_{31} =& \frac{(D_x + A_x - B_x - C_x)(B_y - D_y) - (D_y + A_y - B_y - C_y)(B_x - D_x)}{(B_x - D_x)(B_y - D_y)} \\
    &\cdot \frac{(B_x - D_x)(B_y - D_y)}{(B_y - D_y)(C_x - D_x) - (B_x - D_x)(C_y - D_y)} \\ \\
    =& \frac{(D_x + A_x - B_x - C_x)(B_y - D_y) - (D_y + A_y - B_y - C_y)(B_x - D_x)}{(B_y - D_y)(C_x - D_x) - (B_x - D_x)(C_y - D_y)} \\ \\
    =& { \scriptsize \frac{(A_x - C_x)(B_y - D_y) - (B_x - D_x)(B_y - D_y) - (A_y - C_y)(B_x - D_x) + (B_x - D_x)(B_y - D_y)}{(B_y - D_y)(C_x - D_x) - (B_x - D_x)(C_y - D_y)} } \\ \\
    =& \frac{(A_x - C_x)(B_y - D_y) - (A_y - C_y)(B_x - D_x)}{(B_y - D_y)(C_x - D_x) - (B_x - D_x)(C_y - D_y)}
    \end{align}

    Doing the same for \(M_{32}\):
    
    \begin{align}
    M_{32} =& \frac{(D_y + A_y - B_y - C_y)(C_x - D_x) - (D_x + A_x - B_x - C_x)(C_y - D_y)}{(C_y - D_y)(C_x - D_x)} \\
    &\cdot \frac{(C_y - D_y)(C_x - D_x)}{(B_y - D_y)(C_x - D_x) - (B_x - D_x)(C_y - D_y)} \\ \\
    =& \frac{(D_y + A_y - B_y - C_y)(C_x - D_x) - (D_x + A_x - B_x - C_x)(C_y - D_y)}{(B_y - D_y)(C_x - D_x) - (B_x - D_x)(C_y - D_y)} \\ \\
    =& {\scriptsize \frac{(A_y - B_y)(C_x - D_x) - (C_x - D_x)(C_y - D_y) - (A_x - B_x)(C_y - D_y) + (C_x - D_x)(C_y - D_y)}{(B_y - D_y)(C_x - D_x) - (B_x - D_x)(C_y - D_y)} } \\ \\
    =& \frac{(A_y - B_y)(C_x - D_x) - (A_x - B_x)(C_y - D_y)}{(B_y - D_y)(C_x - D_x) - (B_x - D_x)(C_y - D_y)}
    \end{align}

    With the equations simplified it becomes a little easier
    to see that it is a combination of several vectors based
    on the provided \(A, B, C, D\) points. Also notable is that \(M_{31}\) and \(M_{32}\) share a denominator. Using \(^{\curvearrowleft}\) to be mean rotating a vector counter-clockwise by \(90^{\circ}\), the equations for each matrix component become:

    \begin{align}
    u &= \overrightarrow{DC} \cdot \overrightarrow{DB}^{\curvearrowleft} \\
    M_{31} &= \frac{\overrightarrow{CA} \cdot \overrightarrow{DB}^{\curvearrowleft}}{u} \\
    M_{32} &= \frac{\overrightarrow{DC} \cdot \overrightarrow{BA}^{\curvearrowleft}}{u} \\ \\
    M_{11} &= (1 + M_{31})C_x - A_x \\
    M_{12} &= (1 + M_{32})B_x - A_x \\
    M_{21} &= (1 + M_{31})C_y - A_y \\
    M_{22} &= (1 + M_{32})B_y - A_y
    \end{align}

    Placing these calculated values in the matrix allows for
    transforming arbitrary points from normalized space into 
    the projected space defined by \(\overrightarrow{AB}\) and \(\overrightarrow{CD}\).
    It is important to divide by the resulting \(z\) term to normalize the resulting 2D
    coordinate just as you would divide by the resulting \(w\) term for a 
    3D perspective transformation.
    $$
    #+END_EXPORT

* General Documentation and Use of Slit Scan
  This covers the usage from the command-line. Rather than go into extensive documentation
  on the command-line commands and options (the program itself provides this), we shall
  give some helpul examples.
** System Limits
   You may have to set system limits to boost the number
   of open files.
   $$
   ulimit -S -n 2048
   $$

** Simple case -- one image, simple vertical slit
   slit-scan --i1 flower.jpg --format png --out film/

** Typical -- 2 images simple vertical and horizontal slits
** Advanced 1 -- 2 images, staight line rotating slit
** Advanced 2 -- 2 images, sine slit
** Advanced 3 -- 2 images, rotating sine slit
** Advanced 4 -- 2 images, arbitrary function for the slit and the 2 endpoints
   
