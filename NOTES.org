#+TITLE: Slit Scan Notes
#+AUTHOR: Fred Mitchell
#+SETUPFILE: /development/config/LaTeX-Org-setup.org

* Slit Scan Notes
** Disclaimer
   These are my basic notes on this project, and are not
   meant for general consumption, and therefore are not
   gauranteed to be accurate or even useful for anyone 
   other than myself. Please see the README.org or the
   README.pdf for that.
** Loading Images
   + We could resize one of the images to be the 
     exact same size/dimensions of the other. Would simplify 
     the math quite a bit. But might cause some wierdness
     in some circumstances. Of course, the user
     can correct the issue and make sure both images
     are the same dimensions, etc.
   + Trying to determine how to transverse the images 
     slit-wise. In mapping the images, we are simply
     given the x,y coordinates. Of course, we can
     work backwards from there to determine the "slit",
     and should cover this in the math description in the README.
*** Pipelining
    We can manipulate the source images to be the same size, and rotate
    them to do a horizontal scan. For 2 images, we create each canvas
    seperately, then combine them during the compositing phase.

    Indeed, we shall take a pipelining approach, so we can run all of this
    in parallel to utilize all the available cores.
** Scanning the images
   It just occured to me that we should scan from the basis of the canvas, since
   that is the target, and simply do the math transforms to the source images.
   This way, we can handle blending / dithering / smoothing between pixels on the
   destination image (canvas) very naturally.

   In fact, we can utilize the normal mapping function of the destination, and 
   simply address the pixels via the index fuction from the sources.

*** Orign of Graphics.Image images
    The origin is in the upper-left corner and descends down and right.
    This is typical of computer graphics going all the way back to the raster scan
    days which almost invariably stated from the upper left and scanned to the
    right and down.

    From a mathematical perspective, I have always found this annoying, but for
    purposes of keeping things "simple", I will embrace that in my math here.
*** Scan Direction
    On the source images, we will initally scan from right to left, meaning that
    conceptually the source image is moving from left to right. Time t is a Double
    parameter, even though a single tick of t represents one pixel.

    Scan speed is based on scans per second, which will be somewhat related to 
    frames per second, but not perfectly.

*** Scan Index (si)
    The scan index roughly relates to the frame index (fi) but is based
    on the number of scans per second. On the first frame, si will be less than 
    the actual scan width of both the source and canvas. This will eventually change,
    where the scan index will exceed the scan width of the source, in which
    case -- for now, it will wrap around.

    For the canvas, it will simply go to the end and stop.

    In actuality, I don't think there's anything special we need to do for the
    canvas. It's all on the source, and handling the wrap-around correctly.
    
** Outputting the video
   We shall use "out" as the path-filename fragment, where
   a 4-digit (or 5-digit?) sequence number shall be appened,
   along with the .EXT (default is png).

   Later on, we'll change this to do a video file directly. 

   #+begin_src bash
   ffmpeg -framerate 30 -pattern_type glob -i '*.png' -c:v libx264 -pix_fmt yuv420p out.mp4
   #+end_src

** Future planned enhancements
* Developer Notes
** Running the tests
   
